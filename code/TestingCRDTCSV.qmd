---
title: "CRDT Covid"
format: html
editor: visual
---

```{r}
rm(list = ls())
library(here)
library(tidyverse)
library(ggfortify)
ctcov<-read.csv(here("data","CRDT Data - CRDT.csv"))
glimpse(ctcov)
```

```{r}
ctcov<-ctcov|>
  rename_with(~str_remove(.,"thnicity_"))
ctcovlong <- ctcov |>
  pivot_longer(cols = matches("_"), # Keep column, reshape others
               names_to = "Race", # New column for race names
               values_to = "Count")# New column for counts
ctcovlong<-ctcovlong|>
  separate(Race, into = c("Type","Race"))
ctcov2<- ctcovlong |>
  pivot_wider(names_from = Type, values_from = Count)
```

```{r}
ctcov2 <- ctcov2 |>
  mutate(State = ifelse(State == "DC", "District of Columbia", 
                        state.name[match(State, state.abb)]))# Convert abbreviations to full names
ctcov2 <-ctcov2|>
  mutate(State = replace(State, is.na(State), "Territory"))
```

```{r}
ctcov2 <- ctcov2|>
  mutate(Region = case_when(
    State %in% c("Maine", "New Hampshire", "Vermont", "Massachusetts", "Rhode Island", "Connecticut", "New York", "New Jersey", "Pennsylvania") ~ "Northeast",
    State == "District of Columbia" ~ "Midatlantic",  # Assign DC to a region
    State %in% c("Illinois", "Indiana", "Michigan", "Ohio", "Wisconsin", "Iowa", "Minnesota", "Missouri", "North Dakota", "South Dakota", "Nebraska", "Kansas") ~ "Midwest",
    State %in% c("Delaware", "Maryland", "Virginia", "West Virginia", "North Carolina") ~ "Midatlantic",
    State %in% c("Kentucky", "South Carolina", "Tennessee", "Georgia", "Florida", "Alabama", "Mississippi", "Arkansas", "Louisiana", "Texas", "Oklahoma") ~ "South",
    State %in% c("Montana", "Idaho", "Wyoming", "Colorado", "New Mexico", "Arizona", "Utah", "Nevada") ~ "West",
    State %in% c("Washington", "Oregon", "California", "Alaska", "Hawaii") ~ "Pacific",
    State == "Territory" ~ "Territories of USA",
    TRUE ~ "Other"
  ))

```

```{r}
ctcov2 <- ctcov2|>
  mutate(Gov_Control = case_when(
    State %in% c("Alabama", "Alaska", "Arkansas", "Florida", "Georgia", 
                 "Idaho", "Indiana", "Iowa", "Mississippi", "Missouri", "Montana", 
                 "Nebraska", "North Dakota", "Ohio", "Oklahoma", "South Carolina", 
                 "South Dakota", "Tennessee", "Texas", "Utah", "West Virginia", 
                 "Wyoming", "New Hampshire") ~ "Red",
                 
    State %in% c("California", "Colorado", "Connecticut", "Delaware", "Hawaii", 
                 "Illinois", "Maine", "Massachusetts", "Nevada", "New Jersey", 
                 "New Mexico", "New York", "Oregon", "Rhode Island", "Vermont", 
                 "Virginia", "Washington", "District of Columbia") ~ "Blue",
                 
    State %in% c("Arizona", "Michigan", "Minnesota", "North Carolina", "Pennsylvania", 
                 "Wisconsin", "Kentucky", "Louisiana", "Maryland", "Kansas") ~ "Divided",
                 
    State %in% c("Territory") ~ "Territory",
                 
    TRUE ~ "Unknown"
  ))

```

```{r}
ctcov2$Date<-ymd(ctcov2$Date)
```

```{r}
library(tidycensus)
# Load 2020 Census state population data
state_pop_2020 <- get_decennial(
  geography = "state", 
  variables = "P1_001N",  # Total population from 2020 Census
  year = 2020, 
  sumfile = "pl"
)

# Rename columns for clarity
state_pop_2020 <- state_pop_2020 |>
  rename(State = NAME, Population = value)

# View the first few rows of the dataset
head(state_pop_2020)
ctcov2 <- ctcov2 %>%
  left_join(state_pop_2020, by = "State")  # Merging by State column

```

race populations

```{r}
ctcov2$Race<-as.factor(ctcov2$Race)
levels(ctcov2$Race)
```

Code from here will not run without inputting your Census API Key at the top of this code chunk.

```{r}
# Set your API key if not already set
#census_api_key("APIkey", install = TRUE)

# Define racial variables from ACS 5-year estimates
race_vars <- c(
  White = "B02001_002",
  Black = "B02001_003",
  AIAN = "B02001_004",
  Asian = "B02001_005",
  NHPI = "B02001_006",
  Other = "B02001_007",
  Multiracial = "B02001_008"
)

# Get ACS racial data for states
state_race_data <- get_acs(
  geography = "state",
  variables = race_vars,
  year = 2022,
  survey = "acs5"
) %>%
  select(NAME, variable, estimate) %>%
  pivot_wider(names_from = variable, values_from = estimate)
# Convert state_race_data to long format
state_race_long <- state_race_data %>%
  pivot_longer(
    cols = -NAME,  # Keep the state name column
    names_to = "Race", 
    values_to = "population by race"
  )

ctcov2merged <- ctcov2 %>%
  left_join(state_race_long, by = c("State" = "NAME", "Race"))


```

```{r}
ctcov2merged<-ctcov2merged|>filter(Deaths >= 0)
```

```{r}
ctcov3<- ctcov2merged |>
         filter(Date == "2021-03-07",
                Race!="EHispanic"&
                  Race!="ENonHispanic"&
                  Race!="EUnknown"&
                  Race!="Unknown"&
                  Race!="Latinx",
                State!="Territory" )
# Fill "Total" race category with state total population
ctcov3 <- ctcov3 %>%
  mutate(`population by race` = ifelse(Race == "Total", Population, `population by race`)) %>%
  select(-Population)  # Remove redundant total population column
```

```{r}
covwithraces<-ctcov3|>
  select(c(1,2,3,4,5,6,7,8,9,12))
glimpse(covwithraces)
```

Fixing data types

```{r}
covwithraces<-covwithraces|>
  rename('Population_By_Race'='population by race')
covwithraces$Date<-ymd(covwithraces$Date)
covwithraces$State<-as.factor(covwithraces$State)
covwithraces$Race<-as.factor(covwithraces$Race)
covwithraces$Region<-as.factor(covwithraces$Region)
covwithraces$Gov_Control<-as.factor(covwithraces$Gov_Control)
glimpse(covwithraces)
```

# New csv

```{r}
#write.csv(ctcov2, file = "first_merged_CRDT.csv")
#write.csv(covwithraces, file = "CovidbyRaceandState.csv")

```
